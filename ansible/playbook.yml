---
- name: Setting up prerequsites for the front-end instance
  hosts: all
  gather_facts: yes
  tasks:
    - name: "Creating /home/wordpress-data directory on front-end and back-end instances"
      file:
        path: /home/wordpress-data
        state: directory


- name: Install and configure HaProxy on Front-End
  hosts: front
  tasks:
    - name: Ensure installation and update of HaProxy
      apt:
        name: haproxy
        state: latest
    - name: Ensure HaProxy has started
      service:
        name: haproxy
        state: started
    - name: Configurate HaProxy
      template:
        src: templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify:
        - Reload haproxy
    - name: Ensure installation of NFS server
      apt:
        name:
          - nfs-kernel-server
          - nfs-common
        state: latest
    - name: Ensure nfs service is running
      service:
        name: nfs-kernel-server
        state: started
    - name: Copy /etc/exports file
      template:
        src: templates/exports.j2
        dest: /etc/exports
      notify:
        - Restart nfs-kernel-server
  handlers:
    - name: Reload haproxy
      ansible.builtin.service:
        name: haproxy
        state: reloaded
    - name: Restart nfs-kernel-server
      ansible.builtin.service:
        name: nfs-kernel-server
        state: restarted

- name: Configuring back-end instances
  hosts: backends
  gather_facts: yes
  vars:
    txt: "Mon user eductive17 : le meilleur !"
  tasks:
    - name: Ensure Nginx package is installed
      apt:
        update_cache: true
        name: nginx
        state: latest
    - name: Configure kitten page
      template:
        src: templates/index.html.j2
        dest: /var/www/html/index.html
    - name: Configure Nginx to listen on the vRack
      template:
        src: templates/default.j2
        dest: /etc/nginx/sites-available/default
      notify:
        - Restart Nginx
    - name: Ensure Docker dependencies are installed
      apt:
        update_cache: true
        name:
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - gnupg
        state: latest
    - name: Ensure key is succesfully installed
      apt_key:
        url: "https://download.docker.com/linux/debian/gpg"
    - name: Ensure repository is successfully updated
      apt_repository:
        repo: "deb https://download.docker.com/linux/debian bullseye stable"
    - name: Ensure successful installation of Docker
      apt:
        name:
          - docker
          - docker-compose
          - docker-compose-plugin
        state: latest
    - name: Ensure or install ifconfig.io on the docker
      copy:
        src: templates/ifconfig.io
        dest: /home/debian/
    - name: test
      ansible.builtin.git:
        repo: https://github.com/georgyo/ifconfig.io.git
        dest: /home/debian/ifconfig.io
    - name: Ensure deployment of image ifconfig.io
      community.docker.docker_compose:
        project_name: ifconfig.io
        project_src: /home/debian/ifconfig.io/
    - name: Ensure installation of nfs package
      apt:
        name: nfs-common
        state: latest
    - name: mounting NFS clients to NFS server
      mount:
        src: 192.168.17.254:/home/wordpress-data
        path: /home/wordpress-data
        fstype: nfs
        state: mounted
    - name: Copy docker-compose file into the nfs directory
      template:
        src: templates/docker-compose.yml.j2
        dest: /home/wordpress-data/docker-compose.yml
    - name: Ensure deployment of wordpress image
      community.docker.docker_compose:
        project_name: wordpress
        project_src: /home/wordpress-data/
    - name: "Firewall rule: Authorize all on vRack"
      ansible.builtin.command: iptables --append INPUT --protocol tcp --src 192.168.17.0/24 --dst 192.168.17.0/24 --jump ACCEPT
    - name: "Firewall rule: Authorize frontend to communicate with backend on public interface"
      ansible.builtin.command: iptables --append INPUT --protocol tcp --src "{{item}}" --dest "{{inventory_hostname}}"  --dport 80 --jump ACCEPT
      with_items:
        - "{{hostvars[inventory_hostname].groups.front[0]}}"
    - name: "Firewall rule: Authorize backend connection to only ssh"
      ansible.builtin.command: iptables --append INPUT --protocol tcp --dest "{{inventory_hostname}}" --match multiport --dports 22 --jump ACCEPT
    - name: "Firewall rule: Deny anothing that connects to backend by default"
      ansible.builtin.command: iptables --append INPUT --protocol tcp --dest "{{inventory_hostname}}" --jump DROP
  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
